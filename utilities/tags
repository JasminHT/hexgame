!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CanvasDraw	CanvasDraw.js	/^function CanvasDraw (canvas) {$/;"	c
CanvasDraw.clear	CanvasDraw.js	/^    CanvasDraw.prototype.clear = function() {$/;"	m
CanvasDraw.drawDot	CanvasDraw.js	/^    CanvasDraw.prototype.drawDot = function (point,size,color) {$/;"	m
CanvasDraw.drawLine	CanvasDraw.js	/^    CanvasDraw.prototype.drawLine = function(p1,p2,width,color) {$/;"	m
CanvasDraw.drawPolygon	CanvasDraw.js	/^    CanvasDraw.prototype.drawPolygon = function(points,width,fill_color,line_color) {$/;"	m
CanvasDraw.drawText	CanvasDraw.js	/^    CanvasDraw.prototype.drawText = function(text,position,color,fontsize) {$/;"	m
CanvasDraw.draw_sprite	CanvasDraw.js	/^    CanvasDraw.prototype.draw_sprite = function() {$/;"	m
CanvasDraw.getHeight	CanvasDraw.js	/^    CanvasDraw.prototype.getHeight = function() {$/;"	m
CanvasDraw.getWidth	CanvasDraw.js	/^    CanvasDraw.prototype.getWidth = function() {$/;"	m
CanvasDraw.reDrawPolygon	CanvasDraw.js	/^    CanvasDraw.prototype.reDrawPolygon = function(new_position) {$/;"	m
CanvasInput	CanvasInput.js	/^function CanvasInput(canvas) {$/;"	c
CanvasInput.clickCanvas	CanvasInput.js	/^    CanvasInput.prototype.clickCanvas = function(event) {$/;"	m
CanvasInput.getCursorPosition	CanvasInput.js	/^    CanvasInput.prototype.getCursorPosition = function(event) {$/;"	m
CanvasInput.mouseButtonDown	CanvasInput.js	/^    CanvasInput.prototype.mouseButtonDown = function(ev,button) {$/;"	m
CanvasInput.mouseMove	CanvasInput.js	/^    CanvasInput.prototype.mouseMove = function(event) {$/;"	m
CanvasInput.mouseWheel	CanvasInput.js	/^    CanvasInput.prototype.mouseWheel = function(event) {$/;"	m
CanvasInput.touchEnd	CanvasInput.js	/^    CanvasInput.prototype.touchEnd = function(ev) {$/;"	m
CanvasInput.touchMove	CanvasInput.js	/^    CanvasInput.prototype.touchMove = function(ev) {$/;"	m
CanvasInput.touchStart	CanvasInput.js	/^    CanvasInput.prototype.touchStart = function(ev) {$/;"	m
CanvasInput.windowResize	CanvasInput.js	/^    CanvasInput.prototype.windowResize = function()  {$/;"	m
Edge	Hex.js	/^function Edge(hex,direction_number) {$/;"	c
Edge.equals	Hex.js	/^	Edge.prototype.equals = function(other_edge) {$/;"	m
Edge.getInnerHex	Hex.js	/^	Edge.prototype.getInnerHex = function() {$/;"	m
Edge.getOuterHex	Hex.js	/^	Edge.prototype.getOuterHex = function() {$/;"	m
Edge.getPoint1	Hex.js	/^	Edge.prototype.getPoint1 = function() {$/;"	m
Edge.getPoint2	Hex.js	/^	Edge.prototype.getPoint2 = function() {$/;"	m
Edge.getVertex1	Hex.js	/^	Edge.prototype.getVertex1 = function() {$/;"	m
Edge.getVertex2	Hex.js	/^	Edge.prototype.getVertex2 = function() {$/;"	m
Edge.sort	Hex.js	/^}$/;"	f
EventTarget	CanvasInput.js	/^function EventTarget() {$/;"	f
HTMLCanvasElement	CanvasInput.js	/^};$/;"	c
HTMLCanvasElement.rel_mouse_coords	CanvasInput.js	/^HTMLCanvasElement.prototype.rel_mouse_coords = rel_mouse_coords;$/;"	m
Hex	Hex.js	/^function Hex(q,r) { \/\/stores a hex unit$/;"	c
Hex.add	Hex.js	/^}$/;"	f
Hex.constructor	Hex.js	/^Hex.prototype = {$/;"	p
Hex.corners	Hex.js	/^    new Hex(-1.0\/3.0,-1.0\/3.0),new Hex(-2.0\/3.0,1.0\/3.0),new Hex(-1.0\/3.0,2.0\/3.0)] ;$/;"	f
Hex.distance	Hex.js	/^}$/;"	f
Hex.distanceToCenter	Hex.js	/^}$/;"	f
Hex.equals	Hex.js	/^}$/;"	f
Hex.getQ	Hex.js	/^Hex.prototype.getQ = function() {$/;"	m
Hex.getR	Hex.js	/^Hex.prototype.getR = function() {$/;"	m
Hex.getS	Hex.js	/^Hex.prototype.getS = function() {$/;"	m
Hex.line	Hex.js	/^}$/;"	f
Hex.linearInterpolate	Hex.js	/^}$/;"	f
Hex.multiply	Hex.js	/^}$/;"	f
Hex.neighbor	Hex.js	/^}				      $/;"	f
Hex.neighbors	Hex.js	/^}$/;"	f
Hex.outline	Hex.js	/^	}$/;"	f
Hex.round	Hex.js	/^}$/;"	f
Hex.substract	Hex.js	/^}$/;"	f
HexLayout	Hex.js	/^function HexLayout (orientation, size, origin) {$/;"	c
HexLayout.hexToPoint	Hex.js	/^	HexLayout.prototype.hexToPoint = function(hex) {$/;"	m
HexLayout.pointToHex	Hex.js	/^	HexLayout.prototype.pointToHex = function(point) {$/;"	m
HexLayout.pointsToHexes	Hex.js	/^	HexLayout.prototype.pointsToHexes = function(points) {$/;"	m
HexMap	Hex.js	/^function HexMap() {$/;"	c
HexMap.containsHex	Hex.js	/^	HexMap.prototype.containsHex = function(hex) {$/;"	m
HexMap.containsKey	Hex.js	/^	HexMap.prototype.containsKey = function(key) {$/;"	m
HexMap.flip	Hex.js	/^	HexMap.prototype.flip = function(hex,values) {$/;"	m
HexMap.getArray	Hex.js	/^	HexMap.prototype.getArray = function() {$/;"	m
HexMap.getHex	Hex.js	/^	HexMap.prototype.getHex = function(key) {$/;"	m
HexMap.getValue	Hex.js	/^	HexMap.prototype.getValue = function(hex) {$/;"	m
HexMap.getValues	Hex.js	/^	HexMap.prototype.getValues = function() {$/;"	m
HexMap.hexHash	Hex.js	/^	HexMap.prototype.hexHash = function(hex) {$/;"	m
HexMap.remove	Hex.js	/^	HexMap.prototype.remove = function(hex) {$/;"	m
HexMap.set	Hex.js	/^	HexMap.prototype.set = function(hex,value) {$/;"	m
HexMap.size	Hex.js	/^	HexMap.prototype.size = function() {$/;"	m
Orientation	Hex.js	/^function Orientation(_f0,_f1,_f2,_f3,_b0,_b1,_b2,_b3,_start_angle) {$/;"	c
Point	Hex.js	/^function Point (x,y) {$/;"	c
Point.getDifference	Hex.js	/^	this.getDifference = function(point) {$/;"	m
Point.invert	Hex.js	/^	this.invert = function() {$/;"	m
Point.offset	Hex.js	/^	this.offset = function(xi,yi) {$/;"	m
Point.scale	Hex.js	/^	this.scale = function(k) {$/;"	m
Point.set	Hex.js	/^	this.set = function(x,y) {$/;"	m
Queue	Queue.js	/^function Queue() {$/;"	c
Queue.getLength	Queue.js	/^	Queue.prototype.getLength=function(){$/;"	m
Queue.isEmpty	Queue.js	/^	Queue.prototype.isEmpty=function(){$/;"	m
Queue.peek	Queue.js	/^	Queue.prototype.peek=function(){$/;"	m
Queue.pop	Queue.js	/^	Queue.prototype.pop=function(){$/;"	m
Queue.put	Queue.js	/^	Queue.prototype.put=function(b){$/;"	m
SimplexNoise	Noise.js	/^var SimplexNoise = function(r) {$/;"	c
SimplexNoise.dot	Noise.js	/^SimplexNoise.prototype.dot = function(g, x, y) { $/;"	m
SimplexNoise.noise	Noise.js	/^SimplexNoise.prototype.noise = function(xin, yin) { $/;"	m
SimplexNoise.noise3d	Noise.js	/^SimplexNoise.prototype.noise3d = function(xin, yin, zin) { $/;"	m
Vertex	Hex.js	/^function Vertex(hex,direction_number) {$/;"	c
Vertex.equals	Hex.js	/^	Vertex.prototype.equals = function(other_vertex) {$/;"	m
Vertex.getClockwiseHex	Hex.js	/^	Vertex.prototype.getClockwiseHex = function() {$/;"	m
Vertex.getHexes	Hex.js	/^	Vertex.prototype.getHexes = function() {$/;"	m
Vertex.getInnerHex	Hex.js	/^	Vertex.prototype.getInnerHex = function() {$/;"	m
Vertex.getOuterHex	Hex.js	/^	Vertex.prototype.getOuterHex = function() {$/;"	m
Vertex.getPoint	Hex.js	/^	Vertex.prototype.getPoint = function() {$/;"	m
assert	Tools.js	/^function assert(condition,message) {$/;"	f
complain	Tools.js	/^function complain(message) {$/;"	f
distance	CanvasInput.js	/^function distance(point1,point2) {$/;"	f
emitEvent	Events.js	/^var emitEvent = function(name, val) {$/;"	f
hex_corner	Hex.js	/^var hex_corner = [new Hex(1.0\/3.0, 1.0\/3.0),new Hex(2.0\/3.0, -1.0\/3.0),new Hex(1.0\/3.0, -2.0\/3.0),$/;"	v
hex_direction	Hex.js	/^var hex_direction = [new Hex(1,0),new Hex(1,-1),new Hex(0,-1),$/;"	v
isEven	Hex.js	/^function isEven(n) {$/;"	f
listContainsHex	Tools.js	/^function listContainsHex(hex, list) {$/;"	f
listenForEvent	Events.js	/^function listenForEvent(name,callback) {$/;"	f
rel_mouse_coords	CanvasInput.js	/^function rel_mouse_coords(event){$/;"	f
scream	Tools.js	/^function scream() {$/;"	f
stopListeningForEvent	Events.js	/^function stopListeningForEvent(name) {$/;"	f
